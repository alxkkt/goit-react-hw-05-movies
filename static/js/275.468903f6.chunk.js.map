{"version":3,"file":"static/js/275.468903f6.chunk.js","mappings":"yPACA,GAAgB,SAAW,uBAAuB,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,wBAAwB,SAAW,wB,SC6DzK,EAtDa,WACX,OAA0BA,EAAAA,EAAAA,UAAS,CACjCC,KAAM,GACNC,SAAS,EACTC,OAAO,IAHT,eAAOC,EAAP,KAAcC,EAAd,KAKQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,WAAMC,GAAN,wFACCC,EAAAA,EAAAA,IAAgBD,GADjB,OACZE,EADY,OAElBP,GAAS,SAAAQ,GAAS,yBACbA,GADa,IAEhBZ,KAAMW,EACNV,SAAS,OALO,2CAAH,sDASjB,IACEG,GAAS,SAAAQ,GAAS,yBAAUA,GAAV,IAAqBX,SAAS,OAChDO,EAAYH,GACZ,MAAOH,GACPE,GAAS,SAAAQ,GAAS,yBACbA,GADa,IAEhBX,SAAS,EACTC,MAAOA,EAAMW,gBAGhB,CAACR,IAEJ,IAAQL,EAAkBG,EAAlBH,KAAMC,EAAYE,EAAZF,QACRa,EAASC,QAAQf,EAAKgB,QAC5B,OACE,gCACGf,IAAW,sCACXa,IACC,eAAIG,UAAWC,EAAAA,SAAf,SACGlB,EAAKmB,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,eAAaL,UAAWC,EAAAA,SAAxB,UACE,iBAAKD,UAAWC,EAAAA,cAAhB,WACE,gBAAKK,KAAKC,EAAAA,EAAAA,GAAcH,GAAeI,IAAKL,KAC5C,iBAAKH,UAAWC,EAAAA,UAAhB,WACE,eAAID,UAAWC,EAAAA,UAAf,SAA6BE,KAC7B,gBAAIH,UAAWC,EAAAA,UAAf,wBAAwCI,YALrCb,a,iMC5CfiB,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,sGACRL,EAASM,IAAI,uBADL,uBACvBrB,EADuB,EACvBA,KADuB,kBAGxBA,EAAKsB,SAHmB,2CAAH,qDAMjBC,EAAY,mCAAG,WAAMzB,GAAN,uFACPiB,EAASM,IAAT,iBAAuBvB,IADhB,cACpBE,EADoB,yBAGnBA,GAHmB,2CAAH,sDAMZwB,EAAe,mCAAG,WAAMC,GAAN,yFACNV,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNO,MAAAA,KAHyB,uBACrBzB,EADqB,EACrBA,KADqB,kBAOtBA,EAAKsB,SAPiB,2CAAH,sDAUfI,EAAc,mCAAG,WAAM5B,GAAN,yFACLiB,EAASM,IAAT,iBAAuBvB,EAAvB,aADK,uBACpBE,EADoB,EACpBA,KADoB,kBAGrBA,EAAKsB,SAHgB,2CAAH,sDAMdvB,EAAe,mCAAG,WAAMD,GAAN,yFACNiB,EAASM,IAAT,iBAAuBvB,EAAvB,aADM,uBACrBE,EADqB,EACrBA,KADqB,kBAGtBA,EAAKX,MAHiB,2CAAH,uD,mCChC5B,IAFmB,SAAAsC,GAAI,OAAKA,EAAI,UAFX,mCAEW,OAAqBA,GAASC,I","sources":["webpack://hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","shared/services/movies.js","shared/services/posterLink.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gridList\":\"Cast_gridList__aIKh6\",\"actorName\":\"Cast_actorName__XabVA\",\"actorChar\":\"Cast_actorChar__VY6Sx\",\"actorInfo\":\"Cast_actorInfo__8ZWx-\",\"listItem\":\"Cast_listItem__UvJjd\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { getMovieCredits } from 'shared/services/movies';\nimport getPosterLink from 'shared/services/posterLink';\n\nimport s from './Cast.module.css';\n\nconst Cast = () => {\n  const [state, setState] = useState({\n    cast: [],\n    loading: false,\n    error: false,\n  });\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReview = async id => {\n      const data = await getMovieCredits(id);\n      setState(prevState => ({\n        ...prevState,\n        cast: data,\n        loading: false,\n      }));\n    };\n\n    try {\n      setState(prevState => ({ ...prevState, loading: true }));\n      fetchReview(movieId);\n    } catch (error) {\n      setState(prevState => ({\n        ...prevState,\n        loading: false,\n        error: error.message,\n      }));\n    }\n  }, [movieId]);\n\n  const { cast, loading } = state;\n  const isData = Boolean(cast.length);\n  return (\n    <>\n      {loading && <p>...Loading</p>}\n      {isData && (\n        <ul className={s.gridList}>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <li key={id} className={s.listItem}>\n              <div className={s.itemContainer}>\n                <img src={getPosterLink(profile_path)} alt={name} />\n                <div className={s.actorInfo}>\n                  <h2 className={s.actorName}>{name}</h2>\n                  <h3 className={s.actorChar}>Character: {character}</h3>\n                </div>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'f65bce350427b2684a98ce5b213c02c8',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n\n  return data.results;\n};\n\nexport const getMovieById = async id => {\n  const data = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieReview = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data.results;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data.cast;\n};\n","import defaultPoster from '../../default-minimal.jpeg';\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst getImgLink = path => (path ? `${IMG_BASE_URL}${path}` : defaultPoster);\n\nexport default getImgLink;\n"],"names":["useState","cast","loading","error","state","setState","movieId","useParams","useEffect","fetchReview","id","getMovieCredits","data","prevState","message","isData","Boolean","length","className","s","map","name","profile_path","character","src","getPosterLink","alt","instance","axios","baseURL","params","api_key","getTrendingMovies","get","results","getMovieById","getMovieByQuery","query","getMovieReview","path","defaultPoster"],"sourceRoot":""}