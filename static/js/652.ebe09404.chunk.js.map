{"version":3,"file":"static/js/652.ebe09404.chunk.js","mappings":"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","sources":["webpack://hw-05-movies/./src/pages/MovieDetailsPage/MovieDetailsPage.module.css?9108","pages/MovieDetailsPage/MovieDetailsPage.jsx","shared/services/movies.js","shared/services/posterLink.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MovieDetailsPage_container__fntPy\",\"movieCard\":\"MovieDetailsPage_movieCard__BMoxK\",\"movieCardPoster\":\"MovieDetailsPage_movieCardPoster__cMCE6\",\"movieCardDescr\":\"MovieDetailsPage_movieCardDescr__yPt7D\",\"movieCardTitle\":\"MovieDetailsPage_movieCardTitle__EPcqH\",\"movieCardScore\":\"MovieDetailsPage_movieCardScore__zXd8p\",\"movieCardOverviewTitle\":\"MovieDetailsPage_movieCardOverviewTitle__f+iVA\",\"movieCardOverview\":\"MovieDetailsPage_movieCardOverview__p-Azq\",\"movieCardGenres\":\"MovieDetailsPage_movieCardGenres__d759v\",\"additionalInfoTitle\":\"MovieDetailsPage_additionalInfoTitle__XNxs7\",\"additionalInfo\":\"MovieDetailsPage_additionalInfo__MR4+w\",\"additionalInfoList\":\"MovieDetailsPage_additionalInfoList__zEG6S\",\"additionalInfoItem\":\"MovieDetailsPage_additionalInfoItem__hAD5c\",\"returnBtn\":\"MovieDetailsPage_returnBtn__B4W7j\"};","import {\n  useParams,\n  Link,\n  Outlet,\n  useNavigate,\n  useLocation,\n} from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\nimport { getMovieById } from 'shared/services/movies';\nimport getImgLink from 'shared/services/posterLink';\nimport s from './MovieDetailsPage.module.css';\n\nconst MovieDetailsPage = () => {\n  const [state, setState] = useState({\n    movie: null,\n    loading: false,\n    error: null,\n  });\n  const { movieId } = useParams();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const from = location.state?.from;\n\n  const goBack = () => navigate(from);\n\n  useEffect(() => {\n    const fetchMovieById = async id => {\n      const { data } = await getMovieById(id);\n      setState(prevState => ({ ...prevState, movie: data, loading: false }));\n    };\n\n    try {\n      setState(prevState => ({ ...prevState, loading: true }));\n      fetchMovieById(movieId);\n    } catch (error) {\n      setState(prevState => ({\n        ...prevState,\n        loading: false,\n        error: error.message,\n      }));\n    }\n  }, [movieId]);\n  const { movie, loading, error } = state;\n\n  return (\n    <>\n      {loading && <BeatLoader />}\n      {error && <p>{error}</p>}\n      {movie && (\n        <div className={s.container}>\n          <button type=\"button\" onClick={goBack} className={s.returnBtn}>\n            Go Back\n          </button>\n          <div className={s.movieCard}>\n            <div className={s.movieCardPoster}>\n              <img\n                src={getImgLink(movie.poster_path)}\n                alt=\"Movie Poster\"\n                width=\"360\"\n              />\n            </div>\n            <div className={s.movieCardDescr}>\n              <h2 className={s.movieCardTitle}>\n                {movie.title} ({movie.release_date.slice(0, 4)})\n              </h2>\n              <p className={s.movieCardScore}>\n                User Score: {movie.vote_average}\n              </p>\n              <h3 className={s.movieCardOverviewTitle}>Overview</h3>\n              <p className={s.movieCardOverview}>{movie.overview}</p>\n              <h3 className={s.movieCardGenres}>Genres</h3>\n              <p>{movie.genres.map(({ name }) => name).join(', ')}</p>\n            </div>\n          </div>\n          <div className={s.additionalInfo}>\n            <h4 className={s.additionalInfoTitle}>Additional Information</h4>\n            <ul className={s.additionalInfoList}>\n              <li className={s.additionalInfoItem}>\n                <Link state={{ from }} to={`/movies/${movieId}/cast`}>\n                  Cast\n                </Link>\n              </li>\n              <li className={s.additionalInfoItem}>\n                <Link state={{ from }} to={`/movies/${movieId}/reviews`}>\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <Outlet />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'f65bce350427b2684a98ce5b213c02c8',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n\n  return data.results;\n};\n\nexport const getMovieById = async id => {\n  const data = await instance.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieReview = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data.results;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data.cast;\n};\n","import defaultPoster from '../../default-minimal.jpeg';\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst getImgLink = path => (path ? `${IMG_BASE_URL}${path}` : defaultPoster);\n\nexport default getImgLink;\n"],"names":["useState","movie","loading","error","state","setState","movieId","useParams","navigate","useNavigate","from","useLocation","useEffect","fetchMovieById","id","getMovieById","data","prevState","message","className","s","type","onClick","src","getImgLink","poster_path","alt","width","title","release_date","slice","vote_average","overview","genres","map","name","join","to","instance","axios","baseURL","params","api_key","getTrendingMovies","get","results","getMovieByQuery","query","getMovieReview","getMovieCredits","cast","path","defaultPoster"],"sourceRoot":""}